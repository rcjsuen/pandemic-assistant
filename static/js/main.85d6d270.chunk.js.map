{"version":3,"sources":["../node_modules/@ionic/core/dist/esm-es5 lazy /^/.//.*/.entry/.js$/ groupOptions: {} namespace object","../node_modules/ionicons/dist/esm-es5 lazy /^/.//.*/.entry/.js$/ groupOptions: {} namespace object","components/EpidemicItem.tsx","components/EpidemicsContainer.tsx","pages/EpidemicsTab.tsx","components/CityItem.tsx","components/InfectionsContainer.tsx","pages/InfectionsTab.tsx","service/city.ts","service/infectionDeck.ts","service/playerDeck.ts","service/pandemicAssistant.ts","pages/MainTabs.tsx","controller/controller.ts","components/NextButton.tsx","pages/SetupPage.tsx","components/StartButton.tsx","pages/SeasonSetupPage.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","keys","Object","module","exports","EpidemicItem","props","icon","this","drawn","checkmarkCircleOutline","closeOutline","slot","label","position","React","Component","EpidemicsContainer","mounted","handler","setState","playerCards","controller","getRemainingPlayerCards","epidemics","getEpidemicsDrawn","minCards","getMinRemainder","maxCards","getMaxRemainder","state","attachPlayerDeckHandler","detachPlayerDeckHandler","minRounds","Math","ceil","maxRounds","allDrawn","length","reduce","previous","current","getSeason","color","index","disabled","expand","onClick","drawPlayerDeck","warningOutline","happyOutline","EpidemicsTab","fullscreen","collapse","size","CityItem","season","city","button","undefined","getLabel","ellipse","getColour","InfectionsContainer","updateState","filter","groups","getCityGroups","discards","getDiscards","attachInfectionDeckHandler","detachInfectionDeckHandler","isInfected","hasDiscards","value","onIonChange","detail","month","intensify","sticky","shouldShow","side","removeInfectionCard","document","getElementById","close","group","name","drawInfectionDeck","InfectionsTab","getMonth","City","flag","colours","region","infected","SAN_FRANCISCO","CHICAGO","MONTREAL","ATLANTA","NEW_YORK","WASHINGTON_DC","LONDON","PARIS","MADRID","ESSEN","ST_PETERSBURG","MILAN","LOS_ANGELES","MIAMI","MEXICO_CITY","BOGOTA","SAO_PAOLO","BUENOS_AIRES","LIMA","SANTIAGO","LAGOS","KINSHASA","JOHANNESBURG","KHARTOUM","MOSCOW","ALGIERS","RIYADH","BAGHDAD","TEHRAN","CAIRO","ISTANBUL","KARACHI","DELHI","MUMBAI","CHENNAI","KOLKATA","BEIJING","SHANGHAI","HONG_KONG","TAIPEI","BANGKOK","MANILA","JAKARTA","HO_CHI_MINH_CITY","SEOUL","TOKYO","OSAKA","SYDNEY","LEOPOLDVILLE","BOMBAY","CALCUTTA","HANOI","NOVOSIBIRSK","PEKING","PYONGYANG","SAIGON","EAST_BERLIN","KIEV","LENINGRAD","PRAGUE","ROME","WARSAW","HAVANA","TORONTO","WASHINGTON","SAO_PAULO","TRIPOLI","JACKSONVILLE","getInfectedCity","getName","infect","InfectionDeck","seasonZeroConfiguration","getCities","push","africaThreatCards","forEach","southAmericaThreatCards","sort","a","b","localeCompare","idx","indexOf","splice","PlayerDeck","initialDeckSize","playerCount","eventCards","epidemicCards","objectiveCards","counts","drawnEpidemics","drawnCards","drawnCurrentBucket","deck","currentBucket","total","getStartingRemoval","remainder","split","floor","epidemic","depth","cards","i","PandemicAssistant","playerDeck","infectionDeck","epidemicsDrawn","epidemicsDrawnIndex","getRemainingCards","draw","playerDeckHandlers","infectionDeckHandlers","assistant","handlers","notifyHandlers","setup","notifyPlayerDeckHandlers","notifyInfectionDeckHandlers","MainTabs","Storage","get","key","setupResult","initializedResult","JSON","parse","set","exact","path","tab","href","globeOutline","NextButton","router","useIonRouter","String","SetupPage","interface","Number","serialize","africa","southAmerica","StartButton","stringify","config","SeasonSetupPage","Set","result","updateExtraThreatCards","bind","threatCards","cities","clear","add","cardsToUpdate","infectionCards","multiple","defaultHref","type","placeholder","min","createInfectionSelection","App","component","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"kHAAA,IAAIA,EAAM,CACT,8BAA+B,CAC9B,GACA,GAED,uBAAwB,CACvB,GACA,GAED,uBAAwB,CACvB,GACA,GAED,0BAA2B,CAC1B,GACA,IAED,6BAA8B,CAC7B,GACA,IAED,0BAA2B,CAC1B,GACA,IAED,0BAA2B,CAC1B,GACA,IAED,wBAAyB,CACxB,GACA,IAED,0BAA2B,CAC1B,GACA,IAED,sBAAuB,CACtB,GACA,IAED,uBAAwB,CACvB,GACA,IAED,4BAA6B,CAC5B,GACA,IAED,uBAAwB,CACvB,IACA,IAED,qBAAsB,CACrB,IACA,IAED,mCAAoC,CACnC,IACA,IAED,uBAAwB,CACvB,IACA,IAED,+BAAgC,CAC/B,IACA,IAED,wBAAyB,CACxB,IACA,IAED,yBAA0B,CACzB,IACA,IAED,wBAAyB,CACxB,IACA,IAED,uBAAwB,CACvB,IACA,GAED,uBAAwB,CACvB,IACA,IAED,yBAA0B,CACzB,IACA,GAED,8BAA+B,CAC9B,IACA,IAED,yBAA0B,CACzB,IACA,IAED,uBAAwB,CACvB,IACA,IAED,6BAA8B,CAC7B,IACA,IAED,2BAA4B,CAC3B,IACA,IAED,+BAAgC,CAC/B,IACA,IAED,yBAA0B,CACzB,IACA,IAED,2BAA4B,CAC3B,IACA,IAED,2BAA4B,CAC3B,IACA,IAED,0BAA2B,CAC1B,IACA,IAED,yBAA0B,CACzB,IACA,IAED,yBAA0B,CACzB,IACA,IAED,4BAA6B,CAC5B,IACA,IAED,2BAA4B,CAC3B,IACA,IAED,uBAAwB,CACvB,IACA,IAED,sBAAuB,CACtB,IACA,IAED,0BAA2B,CAC1B,IACA,IAED,uBAAwB,CACvB,IACA,IAED,wBAAyB,CACxB,IACA,IAED,gCAAiC,CAChC,IACA,KAGF,SAASC,EAAoBC,GAC5B,IAAIC,EAAoBC,EAAEJ,EAAKE,GAC9B,OAAOG,QAAQC,UAAUC,MAAK,WAC7B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBP,EAAM,KAEjD,MADAM,EAAEE,KAAO,mBACHF,KAIR,IAAIG,EAAMX,EAAIE,GAAMU,EAAKD,EAAI,GAC7B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","file":"static/js/main.85d6d270.chunk.js","sourcesContent":["var map = {\n\t\"./ion-action-sheet.entry.js\": [\n\t\t88,\n\t\t5\n\t],\n\t\"./ion-alert.entry.js\": [\n\t\t89,\n\t\t6\n\t],\n\t\"./ion-app_8.entry.js\": [\n\t\t90,\n\t\t7\n\t],\n\t\"./ion-avatar_3.entry.js\": [\n\t\t91,\n\t\t17\n\t],\n\t\"./ion-back-button.entry.js\": [\n\t\t92,\n\t\t18\n\t],\n\t\"./ion-backdrop.entry.js\": [\n\t\t93,\n\t\t44\n\t],\n\t\"./ion-button_2.entry.js\": [\n\t\t94,\n\t\t19\n\t],\n\t\"./ion-card_5.entry.js\": [\n\t\t95,\n\t\t20\n\t],\n\t\"./ion-checkbox.entry.js\": [\n\t\t96,\n\t\t21\n\t],\n\t\"./ion-chip.entry.js\": [\n\t\t97,\n\t\t22\n\t],\n\t\"./ion-col_3.entry.js\": [\n\t\t98,\n\t\t45\n\t],\n\t\"./ion-datetime_3.entry.js\": [\n\t\t99,\n\t\t10\n\t],\n\t\"./ion-fab_3.entry.js\": [\n\t\t100,\n\t\t23\n\t],\n\t\"./ion-img.entry.js\": [\n\t\t101,\n\t\t46\n\t],\n\t\"./ion-infinite-scroll_2.entry.js\": [\n\t\t102,\n\t\t47\n\t],\n\t\"./ion-input.entry.js\": [\n\t\t103,\n\t\t24\n\t],\n\t\"./ion-item-option_3.entry.js\": [\n\t\t104,\n\t\t25\n\t],\n\t\"./ion-item_8.entry.js\": [\n\t\t105,\n\t\t26\n\t],\n\t\"./ion-loading.entry.js\": [\n\t\t106,\n\t\t27\n\t],\n\t\"./ion-menu_3.entry.js\": [\n\t\t107,\n\t\t28\n\t],\n\t\"./ion-modal.entry.js\": [\n\t\t108,\n\t\t8\n\t],\n\t\"./ion-nav_2.entry.js\": [\n\t\t109,\n\t\t14\n\t],\n\t\"./ion-popover.entry.js\": [\n\t\t110,\n\t\t9\n\t],\n\t\"./ion-progress-bar.entry.js\": [\n\t\t111,\n\t\t29\n\t],\n\t\"./ion-radio_2.entry.js\": [\n\t\t112,\n\t\t30\n\t],\n\t\"./ion-range.entry.js\": [\n\t\t113,\n\t\t31\n\t],\n\t\"./ion-refresher_2.entry.js\": [\n\t\t114,\n\t\t11\n\t],\n\t\"./ion-reorder_2.entry.js\": [\n\t\t115,\n\t\t16\n\t],\n\t\"./ion-ripple-effect.entry.js\": [\n\t\t116,\n\t\t48\n\t],\n\t\"./ion-route_4.entry.js\": [\n\t\t117,\n\t\t32\n\t],\n\t\"./ion-searchbar.entry.js\": [\n\t\t118,\n\t\t33\n\t],\n\t\"./ion-segment_2.entry.js\": [\n\t\t119,\n\t\t34\n\t],\n\t\"./ion-select_3.entry.js\": [\n\t\t120,\n\t\t35\n\t],\n\t\"./ion-slide_2.entry.js\": [\n\t\t121,\n\t\t49\n\t],\n\t\"./ion-spinner.entry.js\": [\n\t\t122,\n\t\t13\n\t],\n\t\"./ion-split-pane.entry.js\": [\n\t\t123,\n\t\t50\n\t],\n\t\"./ion-tab-bar_2.entry.js\": [\n\t\t124,\n\t\t36\n\t],\n\t\"./ion-tab_2.entry.js\": [\n\t\t125,\n\t\t15\n\t],\n\t\"./ion-text.entry.js\": [\n\t\t126,\n\t\t37\n\t],\n\t\"./ion-textarea.entry.js\": [\n\t\t127,\n\t\t38\n\t],\n\t\"./ion-toast.entry.js\": [\n\t\t128,\n\t\t39\n\t],\n\t\"./ion-toggle.entry.js\": [\n\t\t129,\n\t\t12\n\t],\n\t\"./ion-virtual-scroll.entry.js\": [\n\t\t130,\n\t\t51\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 62;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./ion-icon.entry.js\": [\n\t\t131,\n\t\t58\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 64;\nmodule.exports = webpackAsyncContext;","import React from 'react';\nimport { IonIcon, IonItem, IonLabel } from '@ionic/react';\nimport { checkmarkCircleOutline, closeOutline } from 'ionicons/icons';\n\nexport default class EpidemicItem extends React.Component<{ label: string, drawn: boolean, position: number }> {\n\n    constructor(props: { label: string, drawn: boolean, position: number }) {\n        super(props)\n    }\n  \n    public render() {\n        return <IonItem key={this.props.position}>\n            <IonIcon icon={this.props.drawn ? checkmarkCircleOutline : closeOutline} slot=\"end\" />\n            <IonLabel>{this.props.label} {this.props.position}</IonLabel>\n        </IonItem>\n    }\n}\n","import React from 'react';\nimport { IonGrid, IonCol, IonRow, IonList, IonItem, IonLabel, IonButton, IonNote, IonIcon } from '@ionic/react';\nimport './EpidemicsContainer.css';\nimport { Controller } from '../controller/controller';\nimport EpidemicItem from './EpidemicItem';\nimport { happyOutline, warningOutline } from 'ionicons/icons';\n\nclass EpidemicsContainer extends React.Component<{ controller: Controller }, {\n    playerCards: number;\n    epidemics: boolean[];\n    minCards: number;\n    maxCards: number;\n}> {\n\n    private mounted: boolean = false;\n\n    private handler: Function = () => {\n        if (this.mounted) {\n            this.setState({\n                playerCards: this.props.controller.getRemainingPlayerCards(),\n                epidemics: this.props.controller.getEpidemicsDrawn(),\n                minCards: this.props.controller.getMinRemainder(),\n                maxCards: this.props.controller.getMaxRemainder(),\n            });\n        } else {\n            this.state = {\n                playerCards: this.props.controller.getRemainingPlayerCards(),\n                epidemics: this.props.controller.getEpidemicsDrawn(),\n                minCards: this.props.controller.getMinRemainder(),\n                maxCards: this.props.controller.getMaxRemainder()\n            };\n        }\n    };\n\n    constructor(props: { controller: Controller }) {\n        super(props)\n        this.state = {\n            playerCards: this.props.controller.getRemainingPlayerCards(),\n            epidemics: this.props.controller.getEpidemicsDrawn(),\n            minCards: this.props.controller.getMinRemainder(),\n            maxCards: this.props.controller.getMaxRemainder()\n        };\n        this.props.controller.attachPlayerDeckHandler(this.handler);\n    }\n\n    public componentDidMount(): void {\n        this.mounted = true;\n    }\n\n    public componentWillUnmount(): void {\n        this.mounted = false;\n        this.props.controller.detachPlayerDeckHandler(this.handler);\n    }\n  \n    public render() {\n        const minRounds = Math.ceil(this.state.minCards / 2);\n        const maxRounds = Math.ceil(this.state.maxCards / 2);\n        const allDrawn = this.state.epidemics.length === 0 ? false : this.state.epidemics.reduce((previous, current) => {\n            return previous && current;\n        });\n        const label = this.props.controller.getSeason() === 0 ? \"Escalation\" : \"Epidemic\";\n        return (\n            <IonList>\n                <IonItem>\n                    <IonLabel>Player Deck Size</IonLabel>\n                    <IonNote slot=\"end\" color=\"dark\">{this.state.playerCards}</IonNote>\n                </IonItem>\n                {!allDrawn && <IonItem>\n                    <IonLabel>Cards to Next {label}</IonLabel>\n                    <IonNote slot=\"end\" color=\"dark\">{this.state.minCards === 0 && this.state.maxCards === 0 ? \"0\" : `${this.state.minCards}-${this.state.maxCards}`}</IonNote>\n                </IonItem>}\n                {!allDrawn && <IonItem>\n                    <IonLabel>Rounds to Next {label}</IonLabel>\n                    <IonNote slot=\"end\" color=\"dark\">{minRounds === 0 && maxRounds === 0 ? \"0\" : `${minRounds}-${maxRounds}`}</IonNote>\n                </IonItem>}\n                {this.state.epidemics.map((drawn, index) => {\n                    return <EpidemicItem label={label} key={index} drawn={drawn} position={index + 1} />\n                })}\n                {!allDrawn && <IonGrid>\n                    <IonRow>\n                        <IonCol>\n                        </IonCol>\n                        <IonCol>\n                            <IonButton disabled={this.state.minCards > 0} color=\"danger\" expand=\"block\" onClick={() => { this.props.controller.drawPlayerDeck(true) }}>\n                                <IonIcon icon={warningOutline} />\n                            </IonButton>\n                        </IonCol>\n                        <IonCol>\n                            <IonButton color=\"success\" expand=\"block\" onClick={() => { this.props.controller.drawPlayerDeck(false) }}>\n                                <IonIcon icon={happyOutline} />\n                            </IonButton>\n                        </IonCol>\n                        <IonCol>\n                        </IonCol>\n                    </IonRow>\n                </IonGrid>}\n            </IonList>\n        );\n    }\n}\n\nexport default EpidemicsContainer;\n","import { IonContent, IonHeader, IonPage, IonTitle, IonToolbar } from '@ionic/react';\nimport EpidemicsContainer from '../components/EpidemicsContainer';\nimport { ControllerProps } from \"../controller/controller\";\n\nconst EpidemicsTab: React.FC<ControllerProps> = ({ controller }) => {\n  return (\n    <IonPage>\n      <IonHeader>\n        <IonToolbar>\n          <IonTitle>{controller.getSeason() === 0 ? \"Escalations\" : \"Epidemics\"}</IonTitle>\n        </IonToolbar>\n      </IonHeader>\n      <IonContent fullscreen>\n        <IonHeader collapse=\"condense\">\n          <IonToolbar>\n            <IonTitle size=\"large\">{controller.getSeason() === 0 ? \"Escalations\" : \"Epidemics\"}</IonTitle>\n          </IonToolbar>\n        </IonHeader>\n        <EpidemicsContainer controller={controller}/>\n      </IonContent>\n    </IonPage>\n  );\n};\n\nexport default EpidemicsTab;\n","import React from 'react';\nimport { IonIcon, IonItem, IonLabel } from '@ionic/react';\nimport { ellipse } from 'ionicons/icons';\nimport { City } from '../service/city';\n\nexport interface CityItemProps {\n    season: 0 | 1 | 2;\n    city: City;\n    onClick?: React.MouseEventHandler;\n}\n\nconst CityItem: React.FC<CityItemProps> = ({season, city, onClick}) => {\n    return (\n        <IonItem button={onClick !== undefined} onClick={onClick}>\n            <IonLabel>{city.getLabel(season)}</IonLabel>\n            <IonIcon icon={ellipse} color={city.getColour(season)} slot=\"end\"/>\n        </IonItem>\n    );\n};\n\nexport default CityItem;\n","import React from 'react';\nimport { IonItemSliding, IonItemOptions, IonItemOption, IonGrid, IonCol, IonRow, IonList, IonItemDivider, IonButton, IonToolbar, IonSegment, IonSegmentButton } from '@ionic/react';\nimport './InfectionsContainer.css';\nimport { City } from '../service/city';\nimport { Controller } from '../controller/controller';\nimport CityItem from './CityItem';\n\nclass InfectionsContainer extends React.Component<{ controller: Controller, season: 0 | 1 | 2, month: number }, { filter: string, groups: City[][], discards: City[] }> {\n\n    private mounted: boolean = false;\n\n    private handler: Function = () => {\n        this.updateState();\n    };\n\n    constructor(props: { controller: Controller, season: 0 | 1, month: number }) {\n        super(props)\n        this.state = {\n            filter: \"all\",\n            groups: this.props.controller.getCityGroups(),\n            discards: this.props.controller.getDiscards()\n        };\n        this.props.controller.attachInfectionDeckHandler(this.handler);\n    }\n\n    public componentDidMount(): void {\n        this.mounted = true;\n    }\n\n    public componentWillUnmount(): void {\n        this.mounted = false;\n        this.props.controller.detachInfectionDeckHandler(this.handler);\n    }\n\n    private updateState(): void {\n        if (this.mounted) {\n            this.setState({\n                groups: this.props.controller.getCityGroups(),\n                discards: this.props.controller.getDiscards()\n            });\n        } else {\n            this.state = {\n                filter: \"all\",\n                groups: this.props.controller.getCityGroups(),\n                discards: this.props.controller.getDiscards()\n            };\n        }\n    }\n\n    private shouldShow(city: City): boolean {\n        if (this.state.filter === \"all\") {\n            return true;\n        } else if (this.state.filter === \"green\") {\n            return city.isInfected();\n        }\n\n        switch (city.getColour(this.props.season)) {\n            case \"dark\":\n                return this.state.filter === \"black\";\n            case \"danger\":\n                return this.state.filter === \"red\";\n            case \"primary\":\n                return this.state.filter === \"blue\";\n            case \"warning\":\n                return this.state.filter === \"yellow\";\n        }\n        return false;\n    }\n  \n    public render() {\n        const hasDiscards = this.state.discards.length > 0;\n        return (\n            <div>\n                <IonToolbar>\n                    {\n                        this.props.season === 0 && <IonSegment value={this.state.filter} onIonChange={e => { this.setState({filter: e.detail.value as string })}}>\n                            <IonSegmentButton value=\"all\">all</IonSegmentButton>\n                            <IonSegmentButton value=\"blue\">NATO</IonSegmentButton>\n                            <IonSegmentButton value=\"black\">neutral</IonSegmentButton>\n                            <IonSegmentButton value=\"red\">USSR</IonSegmentButton>\n                            {\n                                this.props.month >= 3 && <IonSegmentButton value=\"green\">infected</IonSegmentButton>\n                            }\n                        </IonSegment>\n                    }\n                    {\n                        this.props.season === 1 && <IonSegment value={this.state.filter} onIonChange={e => { this.setState({filter: e.detail.value as string })}}>\n                            <IonSegmentButton value=\"all\">all</IonSegmentButton>\n                            <IonSegmentButton value=\"black\">black</IonSegmentButton>\n                            <IonSegmentButton value=\"blue\">blue</IonSegmentButton>\n                            <IonSegmentButton value=\"red\">red</IonSegmentButton>\n                            <IonSegmentButton value=\"yellow\">yellow</IonSegmentButton>\n                        </IonSegment>\n                    }\n                    {\n                        this.props.season === 2 && <IonSegment value={this.state.filter} onIonChange={e => { this.setState({filter: e.detail.value as string })}}>\n                            <IonSegmentButton value=\"all\">all</IonSegmentButton>\n                            <IonSegmentButton value=\"black\">black</IonSegmentButton>\n                            <IonSegmentButton value=\"blue\">blue</IonSegmentButton>\n                            <IonSegmentButton value=\"yellow\">yellow</IonSegmentButton>\n                        </IonSegment>\n                    }\n                </IonToolbar>\n                <IonGrid>\n                    <IonRow>\n                        <IonCol></IonCol>\n                        <IonCol>\n                            <IonButton disabled={!hasDiscards} expand=\"block\" onClick={() => {\n                                this.props.controller.intensify();\n                                this.updateState();\n                            }} >\n                                Intensify\n                            </IonButton>\n                        </IonCol>\n                        <IonCol></IonCol>\n                    </IonRow>\n                </IonGrid>\n                <IonList>\n                    {hasDiscards && <IonItemDivider sticky>{this.state.discards.length === 0 ? \"Discards\" : `Discards (${this.state.discards.length})`}</IonItemDivider>}\n                {hasDiscards && this.state.discards.map((city, index) => {\n                    if (!this.shouldShow(city)) {\n                        return <div key={index}></div>\n                    }\n                    const id = `discard-${index}`;\n                    return <IonItemSliding id={id} key={index}>\n                        <CityItem season={this.props.season} city={city}/>\n                        <IonItemOptions side=\"end\">\n                            {/* remove a card via Resilient Population */}\n                            <IonItemOption color=\"danger\" onClick={() => {\n                                this.props.controller.removeInfectionCard(city);\n                                this.updateState();\n                                (document.getElementById(id) as any).close();\n                            }}>\n                                Remove\n                            </IonItemOption>\n                      </IonItemOptions>\n                    </IonItemSliding>\n                })}\n                {this.state.groups.map((group, index) => {\n                    let name = `Group ${index + 1} (${group.length})`;\n                    if (index === this.state.groups.length - 1) {\n                        name = \"Deck\";\n                    } else if (index === 0) {\n                        name = `Current Group (${group.length})`;\n                    }\n                    return <div key={index}>\n                        <IonItemDivider sticky>{name}</IonItemDivider>\n                        {group.map((city, index) => {\n                            if (!this.shouldShow(city)) {\n                                return <div key={index}></div>\n                            }\n                            return <CityItem key={index} season={this.props.season} city={city} onClick={() => {\n                                this.props.controller.drawInfectionDeck(city);\n                                this.updateState();\n                            }}/>\n                        })}\n                    </div>\n                })}\n                </IonList>\n            </div>\n        );\n    }\n}\n\nexport default InfectionsContainer;\n","import { IonContent, IonHeader, IonPage, IonTitle, IonToolbar } from '@ionic/react';\nimport InfectionsContainer from '../components/InfectionsContainer';\nimport { ControllerProps } from \"../controller/controller\";\n\nconst InfectionsTab: React.FC<ControllerProps> = ({controller}) => {\n  return (\n    <IonPage>\n      <IonHeader>\n        <IonToolbar>\n          <IonTitle>{controller.getSeason() === 0 ? \"Threats\" : \"Infections\"}</IonTitle>\n        </IonToolbar>\n      </IonHeader>\n      <IonContent fullscreen>\n        <IonHeader collapse=\"condense\">\n          <IonToolbar>\n            <IonTitle size=\"large\">{controller.getSeason() === 0 ? \"Threats\" : \"Infections\"}</IonTitle>\n          </IonToolbar>\n        </IonHeader>\n        <InfectionsContainer controller={controller} season={controller.getSeason()} month={controller.getMonth()} />\n      </IonContent>\n    </IonPage>\n  );\n};\n\nexport default InfectionsTab;\n","export class City {\n    constructor(\n        private name: string,\n        private flag: string,\n        private colours: (\"dark\" | \"danger\" | \"primary\" | \"warning\")[],\n        private region: \"Africa\" | \"Asia\" | \"Europe\" | \"North America\" | \"Pacific Rim\" | \"South America\",\n        private infected: boolean = false\n    ) { }\n\n    public getName(): string {\n        return this.name;\n    }\n\n    public getLabel(season: 0 | 1 | 2): string {\n        if (season === 2) {\n            return this.name;\n        }\n        if (this.infected) {\n            return `☣️ ${this.name} (${this.region})`;\n        }\n        return `${this.flag} ${this.name} (${this.region})`;\n    }\n\n    public getColour(season: 0 | 1 | 2): \"dark\" | \"danger\" | \"primary\" | \"warning\" | \"success\" {\n        if (this.colours.length < 2) {\n            throw new Error(this.name);\n        }\n        if (this.infected) {\n            return \"success\";\n        }\n        return this.colours[season];\n    }\n\n    public infect(): City {\n        return new City(this.name, this.flag, this.colours, this.region, true);\n    }\n\n    public isInfected(): boolean {\n        return this.infected;\n    }\n}\n\nconst SAN_FRANCISCO = new City(\"San Francisco\", \"🇺🇸\", [\"primary\", \"primary\"], \"North America\");\nconst CHICAGO = new City(\"Chicago\", \"🇺🇸\", [\"primary\", \"primary\"], \"North America\");\nconst MONTREAL = new City(\"Montreal\", \"🇨🇦\", [\"primary\", \"primary\"], \"North America\");\nconst ATLANTA = new City(\"Atlanta\", \"🇺🇸\", [\"primary\", \"primary\"], \"North America\");\nconst NEW_YORK = new City(\"New York\", \"🇺🇸\", [\"primary\", \"primary\", \"primary\"], \"North America\");\nconst WASHINGTON_DC = new City(\"Washington DC\", \"🇺🇸\", [\"primary\", \"primary\"], \"North America\");\nconst LONDON = new City(\"London\", \"🇬🇧\", [\"primary\", \"primary\", \"primary\"], \"Europe\");\nconst PARIS = new City(\"Paris\", \"🇨🇵\", [\"primary\", \"primary\"], \"Europe\");\nconst MADRID = new City(\"Madrid\", \"🇪🇸\", [\"dark\", \"primary\"], \"Europe\");\nconst ESSEN = new City(\"Essen\", \"🇩🇪\", [\"primary\", \"primary\"], \"Europe\");\nconst ST_PETERSBURG = new City(\"St. Petersburg\", \"🇷🇺\", [\"primary\", \"primary\"], \"Europe\");\nconst MILAN = new City(\"Milan\", \"🇮🇹\", [\"primary\", \"primary\"], \"Europe\");\nconst LOS_ANGELES = new City(\"Los Angeles\", \"🇺🇸\", [\"primary\", \"warning\"], \"North America\");\nconst MIAMI = new City(\"Miami\", \"🇺🇸\", [\"warning\", \"warning\"], \"North America\");\nconst MEXICO_CITY = new City(\"Mexico City\", \"🇲🇽\", [\"dark\", \"warning\"], \"North America\");\nconst BOGOTA = new City(\"Bogota\", \"🇨🇴\", [\"dark\", \"warning\"], \"South America\");\nconst SAO_PAOLO = new City(\"Sao Paolo\", \"🇧🇷\", [\"warning\", \"warning\"], \"South America\");\nconst BUENOS_AIRES = new City(\"Buenos Aires\", \"🇦🇷\", [\"dark\", \"warning\"], \"South America\");\nconst LIMA = new City(\"Lima\", \"🇵🇪\", [\"dark\", \"warning\"], \"South America\");\nconst SANTIAGO = new City(\"Santiago\", \"🇨🇱\", [\"dark\", \"warning\"], \"South America\");\nconst LAGOS = new City(\"Lagos\", \"🇳🇬\", [\"dark\", \"warning\", \"warning\"], \"Africa\");\nconst KINSHASA = new City(\"Kinshasa\", \"🇨🇩\", [\"warning\", \"warning\"], \"Africa\");\nconst JOHANNESBURG = new City(\"Johannesburg\", \"🇿🇦\", [\"primary\", \"warning\"], \"Africa\");\nconst KHARTOUM = new City(\"Khartoum\", \"🇸🇩\", [\"dark\", \"warning\"], \"Africa\");\nconst MOSCOW = new City(\"Moscow\", \"🇷🇺\", [\"danger\", \"dark\"], \"Europe\");\nconst ALGIERS = new City(\"Algiers\", \"🇩🇿\", [\"primary\", \"dark\"], \"Africa\");\nconst RIYADH = new City(\"Riyadh\", \"🇸🇦\", [\"dark\", \"dark\"], \"Asia\");\nconst BAGHDAD = new City(\"Baghdad\", \"🇮🇶\", [\"danger\", \"dark\"], \"Asia\");\nconst TEHRAN = new City(\"Tehran\", \"🇮🇷\", [\"dark\", \"dark\"], \"Asia\");\nconst CAIRO = new City(\"Cairo\", \"🇪🇬\", [\"danger\", \"dark\", \"dark\"], \"Asia\");\nconst ISTANBUL = new City(\"Istanbul\", \"🇹🇷\", [\"primary\", \"dark\", \"dark\"], \"Europe\");\nconst KARACHI = new City(\"Karachi\", \"🇵🇰\", [\"dark\", \"dark\"], \"Asia\");\nconst DELHI = new City(\"Delhi\", \"🇮🇳\", [\"dark\", \"dark\"], \"Asia\");\nconst MUMBAI = new City(\"Mumbai\", \"🇮🇳\", [\"dark\", \"dark\"], \"Asia\");\nconst CHENNAI = new City(\"Chennai\", \"🇮🇳\", [\"dark\", \"dark\"], \"Asia\");\nconst KOLKATA = new City(\"Kolkata\", \"🇮🇳\", [\"dark\", \"dark\"], \"Asia\");\nconst BEIJING = new City(\"Beijing\", \"🇨🇳\", [\"danger\", \"danger\"], \"Asia\");\nconst SHANGHAI = new City(\"Shanghai\", \"🇨🇳\", [\"danger\", \"danger\"], \"Asia\");\nconst HONG_KONG = new City(\"Hong Kong\", \"🇭🇰\", [\"danger\", \"danger\"], \"Asia\");\nconst TAIPEI = new City(\"Taipei\", \"🇹🇼\", [\"danger\", \"danger\"], \"Asia\");\nconst BANGKOK = new City(\"Bangkok\", \"🇹🇭\", [\"dark\", \"danger\"], \"Asia\");\nconst MANILA = new City(\"Manila\", \"🇵🇭\", [\"dark\", \"danger\"], \"Pacific Rim\");\nconst JAKARTA = new City(\"Jakarta\", \"🇮🇩\", [\"dark\", \"danger\"], \"Pacific Rim\");\nconst HO_CHI_MINH_CITY = new City(\"Ho Chi Minh City\", \"🇻🇳\", [\"danger\", \"danger\"], \"Pacific Rim\");\nconst SEOUL = new City(\"Seoul\", \"🇰🇷\", [\"danger\", \"danger\"], \"Pacific Rim\");\nconst TOKYO = new City(\"Tokyo\", \"🇯🇵\", [\"dark\", \"danger\"], \"Pacific Rim\");\nconst OSAKA = new City(\"Osaka\", \"🇯🇵\", [\"dark\", \"danger\"], \"Pacific Rim\");\nconst SYDNEY = new City(\"Sydney\", \"🇦🇺\", [\"primary\", \"danger\"], \"Pacific Rim\");\n\n// Season 0\nconst LEOPOLDVILLE = new City(\"Leopoldville\", \"🇨🇩\", [\"danger\", \"danger\"], \"Africa\");\nconst BOMBAY = new City(\"Bombay\", \"🇮🇳\", [\"danger\", \"danger\"], \"Asia\");\nconst CALCUTTA = new City(\"Calcutta\", \"🇮🇳\", [\"dark\", \"dark\"], \"Asia\");\nconst HANOI = new City(\"Hanoi\", \"🇻🇳\", [\"danger\", \"danger\"], \"Asia\");\nconst NOVOSIBIRSK = new City(\"Novosibirsk\", \"🇷🇺\", [\"danger\", \"danger\"], \"Asia\");\nconst PEKING = new City(\"Peking\", \"🇨🇳\", [\"danger\", \"danger\"], \"Asia\");\nconst PYONGYANG = new City(\"Pyongyang\", \"🇰🇵\", [\"danger\", \"danger\"], \"Asia\");\nconst SAIGON = new City(\"Saigon\", \"🇻🇳\", [\"primary\", \"primary\"], \"Asia\");\nconst EAST_BERLIN = new City(\"East Berlin\", \"🇩🇪\", [\"danger\", \"danger\"], \"Europe\");\nconst KIEV = new City(\"Kiev\", \"🇺🇦\", [\"danger\", \"danger\"], \"Europe\");\nconst LENINGRAD = new City(\"Leningrad\", \"🇷🇺\", [\"danger\", \"danger\"], \"Europe\");\nconst PRAGUE = new City(\"Prague\", \"🇨🇿\", [\"danger\", \"danger\"], \"Europe\");\nconst ROME = new City(\"Rome\", \"🇮🇹\", [\"primary\", \"primary\"], \"Europe\");\nconst WARSAW = new City(\"Warsaw\", \"🇵🇱\", [\"danger\", \"danger\"], \"Europe\");\nconst HAVANA = new City(\"Havana\", \"🇨🇺\", [\"danger\", \"danger\"], \"North America\");\nconst TORONTO = new City(\"Toronto\", \"🇨🇦\", [\"primary\", \"primary\"], \"North America\");\nconst WASHINGTON = new City(\"Washington\", \"🇺🇸\", [\"primary\", \"primary\", \"primary\"], \"North America\");\nconst SAO_PAULO = new City(\"Sao Paulo\", \"🇧🇷\", [\"dark\", \"dark\", \"warning\"], \"South America\");\n\n// Season 2\nconst TRIPOLI = new City(\"Tripoli\", \"🇱🇾\", [\"dark\", \"dark\", \"dark\"], \"Africa\");\nconst JACKSONVILLE = new City(\"Jacksonville\", \"🇺🇸\", [\"warning\", \"warning\", \"warning\"], \"North America\");\n\nexport function getInfectedCity(city: string): City {\n    switch (city) {\n        case ALGIERS.getName():\n            return ALGIERS.infect();\n        case CAIRO.getName():\n            return CAIRO.infect();\n        case JOHANNESBURG.getName():\n            return JOHANNESBURG.infect();\n        case KHARTOUM.getName():\n            return KHARTOUM.infect();\n        case LAGOS.getName():\n            return LAGOS.infect();\n        case LEOPOLDVILLE.getName():\n            return LEOPOLDVILLE.infect();\n        case BOGOTA.getName():\n            return BOGOTA.infect();\n        case BUENOS_AIRES.getName():\n            return BUENOS_AIRES.infect();\n        case LIMA.getName():\n            return LIMA.infect();\n        case SANTIAGO.getName():\n            return SANTIAGO.infect();\n        case SAO_PAULO.getName():\n            return SAO_PAULO.infect();\n    }\n    throw new Error(city);\n}\n\nexport function getAfricaInfections(): City[] {\n    return [\n        ALGIERS.infect(),\n        CAIRO.infect(),\n        JOHANNESBURG.infect(),\n        KHARTOUM.infect(),\n        LAGOS.infect(),\n        LEOPOLDVILLE.infect()\n    ];\n}\n\nexport function getSouthAmericaInfections(): City[] {\n    return [\n        BOGOTA.infect(),\n        BUENOS_AIRES.infect(),\n        LIMA.infect(),\n        SANTIAGO.infect(),\n        SAO_PAULO.infect()\n    ];\n}\n\nexport function getCities(season: number): City[] {\n    if (season === 2) {\n        return [\n            LONDON, LONDON, LONDON,\n            NEW_YORK, NEW_YORK, NEW_YORK,\n            WASHINGTON, WASHINGTON, WASHINGTON,\n\n            CAIRO, CAIRO, CAIRO,\n            ISTANBUL, ISTANBUL, ISTANBUL,\n            TRIPOLI, TRIPOLI, TRIPOLI,\n\n            JACKSONVILLE, JACKSONVILLE, JACKSONVILLE,\n            LAGOS, LAGOS, LAGOS,\n            SAO_PAULO, SAO_PAULO, SAO_PAULO,\n        ]\n    } else if (season === 0) {\n        return [\n            SAN_FRANCISCO,\n            TORONTO,\n            NEW_YORK,\n            LOS_ANGELES,\n            ATLANTA,\n            WASHINGTON,\n            MEXICO_CITY,\n            HAVANA,\n            BOGOTA,\n            LIMA,\n            SAO_PAULO,\n            SANTIAGO,\n            BUENOS_AIRES,\n            LONDON,\n            EAST_BERLIN,\n            PARIS,\n            MADRID,\n            WARSAW,\n            LENINGRAD,\n            MOSCOW,\n            ROME,\n            ISTANBUL,\n            PRAGUE,\n            KIEV,\n            ALGIERS,\n            LAGOS,\n            CAIRO,\n            KHARTOUM,\n            LEOPOLDVILLE,\n            JOHANNESBURG,\n            NOVOSIBIRSK,\n            PEKING,\n            PYONGYANG,\n            DELHI,\n            BAGHDAD,\n            KARACHI,\n            RIYADH,\n            HANOI,\n            CALCUTTA,\n            SHANGHAI,\n            BOMBAY,\n            BANGKOK,\n            SAIGON,\n            OSAKA,\n            TOKYO,\n            SYDNEY,\n            MANILA,\n            JAKARTA\n        ];\n    }\n    return [\n        SAN_FRANCISCO,\n        CHICAGO,\n        MONTREAL,\n        ATLANTA,\n        NEW_YORK,\n        WASHINGTON_DC,\n        LONDON,\n        PARIS,\n        MADRID,\n        ESSEN,\n        ST_PETERSBURG,\n        MILAN,\n        LOS_ANGELES,\n        MIAMI,\n        MEXICO_CITY,\n        BOGOTA,\n        SAO_PAOLO,\n        BUENOS_AIRES,\n        LIMA,\n        SANTIAGO,\n        LAGOS,\n        KINSHASA,\n        JOHANNESBURG,\n        KHARTOUM,\n        MOSCOW,\n        ALGIERS,\n        RIYADH,\n        BAGHDAD,\n        TEHRAN,\n        CAIRO,\n        ISTANBUL,\n        KARACHI,\n        DELHI,\n        MUMBAI,\n        CHENNAI,\n        KOLKATA,\n        BEIJING,\n        SHANGHAI,\n        HONG_KONG,\n        TAIPEI,\n        BANGKOK,\n        MANILA,\n        JAKARTA,\n        HO_CHI_MINH_CITY,\n        SEOUL,\n        TOKYO,\n        OSAKA,\n        SYDNEY,\n    ];\n}\n","import { City, getCities, getInfectedCity } from \"./city\";\nimport { SeasonZeroConfiguration } from \"./pandemicAssistant\";\n\nexport class InfectionDeck {\n\n    private groups: City[][];\n\n    private discards: City[] = [];\n\n    constructor(season: number, seasonZeroConfiguration: SeasonZeroConfiguration) {\n        this.groups = [[]];\n        for (const city of getCities(season)) {\n            this.groups[0].push(city);\n        }\n        seasonZeroConfiguration.africaThreatCards.forEach((city) => {\n            this.discards.push(getInfectedCity(city));\n        });\n        seasonZeroConfiguration.southAmericaThreatCards.forEach((city) => {\n            this.discards.push(getInfectedCity(city));\n        });\n        this.groups[0].sort((a, b) => {\n            return a.getName().localeCompare(b.getName());\n        });\n        this.discards.sort((a, b) => {\n            return a.getName().localeCompare(b.getName());\n        });\n    }\n\n    public draw(city: City): void {\n        this.discards.push(city);\n        this.discards.sort((a, b) => {\n            return a.getName().localeCompare(b.getName());\n        });\n        for (const group of this.groups) {\n            const idx = group.indexOf(city);\n            if (idx !== -1) {\n                group.splice(idx, 1);\n                if (group.length === 0) {\n                    this.groups.splice(0, 1);\n                }\n                break;\n            }\n        }\n    }\n\n    public intensify(): void {\n        // insert the discard pile into the front of the groups\n        this.groups.splice(0, 0, this.discards);\n        // reset the discard pile\n        this.discards = [];\n    }\n\n    public removeInfectionCard(city: City): void {\n        const idx = this.discards.indexOf(city);\n        if (idx === -1) {\n            throw new Error(\"Can only remove a card that is in the discard pile\")\n        }\n        this.discards.splice(idx, 1);\n    }\n\n    public getCityGroups(): City[][] {\n        return this.groups;\n    }\n\n    public getDiscards(): City[] {\n        return this.discards;\n    }\n\n    public hasDiscards(): boolean {\n        return this.discards.length > 0;\n    }\n}\n","export class PlayerDeck {\n\n    private counts: number[] = [];\n\n    private drawnEpidemics: boolean[] = [];\n\n    private drawnCards: number = 0;\n\n    private drawnCurrentBucket: number = 0;\n\n    private deck: number;\n\n    private currentBucket: number;\n\n    constructor(initialDeckSize: number, private playerCount: number, eventCards: number, epidemicCards: number, objectiveCards: number) {\n        let total = initialDeckSize + eventCards + epidemicCards - objectiveCards;\n        this.deck = total - this.getStartingRemoval();\n        let remainder = this.deck;\n        let epidemics = epidemicCards;\n        this.counts = [];\n        while (epidemics > 0) {\n            let split = Math.floor(remainder / epidemics);\n            remainder -= Math.floor(split);\n            epidemics--;\n            this.counts.push(split);\n            this.drawnEpidemics.push(false);\n        }\n        this.currentBucket = this.counts.length - 1;\n    }\n\n    public getRemainingCards(): number {\n        return this.deck;\n    }\n\n    public draw(epidemic: boolean): void {\n        this.drawnCards++;\n        this.drawnCurrentBucket++;\n        if (epidemic) {\n            if (this.drawnEpidemics[this.currentBucket]) {\n                throw new Error(\"Already drew an epidemic for this bucket\");\n            }\n            this.drawnEpidemics[this.currentBucket] = true;\n        }\n        let depth = this.deck - this.drawnCards\n        let cards = 0;\n        for (let i = 0; i < this.counts.length; i++) {\n            cards += this.counts[i];\n            if (cards > depth) {\n                return;\n            } else if (cards == depth) {\n                this.currentBucket--;\n                this.drawnCurrentBucket = 0;\n                return;\n            }\n        }\n    }\n\n    public getMinRemainder(): number {\n        if (this.drawnEpidemics[this.currentBucket]) {\n            return this.counts[this.currentBucket] - this.drawnCurrentBucket;\n        }\n        // next card could be an epidemic if we haven't drawn it yet\n        return 0;\n    }\n\n    public getMaxRemainder(): number {\n        if (this.drawnEpidemics[this.currentBucket]) {\n            return this.counts[this.currentBucket] - this.drawnCurrentBucket + this.counts[this.currentBucket - 1] - 1;\n        }\n        return this.counts[this.currentBucket] - this.drawnCurrentBucket - 1;\n    }\n\n    public getCounts(): number[] {\n        return this.counts;\n    }\n\n    private getStartingRemoval(): number {\n        return this.playerCount === 3 ? 9 : 8;\n    }\n}\n","import { City } from \"./city\";\nimport { InfectionDeck } from \"./infectionDeck\";\nimport { PlayerDeck } from \"./playerDeck\";\n\nexport interface SeasonZeroConfiguration {\n    africaThreatCards: string[];\n    southAmericaThreatCards: string[];\n}\n\nexport class PandemicAssistant {\n\n    private playerDeck: PlayerDeck;\n\n    private infectionDeck: InfectionDeck;\n\n    private epidemicsDrawn: boolean[] = [];\n\n    private epidemicsDrawnIndex: number = 0;\n\n    private season: 0 | 1 | 2 = 0;\n\n    private month: number = 0;\n\n    constructor() {\n        this.playerDeck = new PlayerDeck(48, 2, 2, 5, 0);\n        this.infectionDeck = new InfectionDeck(1, { africaThreatCards: [], southAmericaThreatCards: [] });\n    }\n\n    public setup(\n        season: 0 | 1 | 2,\n        month: number,\n        playerCount: number,\n        eventCards: number,\n        epidemicCards: number,\n        objectiveCards: number,\n        seasonZeroConfiguration: SeasonZeroConfiguration\n    ): void {\n        this.season = season;\n        this.month = month;\n        this.playerDeck = new PlayerDeck(season === 2 ? 44 : 48, playerCount, eventCards, epidemicCards, objectiveCards);\n        this.infectionDeck = new InfectionDeck(season, seasonZeroConfiguration);\n        this.epidemicsDrawn = [];\n        for (let i = 0; i < epidemicCards; i++) {\n            this.epidemicsDrawn.push(false);\n        }\n        this.epidemicsDrawnIndex = 0;\n    }\n\n    public getRemainingPlayerCards(): number {\n        return this.playerDeck.getRemainingCards();\n    }\n\n    public getMinRemainder(): number {\n        return this.playerDeck.getMinRemainder();\n    }\n\n    public getMaxRemainder(): number {\n        return this.playerDeck.getMaxRemainder();\n    }\n\n    public drawPlayerDeck(epidemic: boolean): void {\n        this.playerDeck.draw(epidemic);\n        if (epidemic) {\n            this.epidemicsDrawn[this.epidemicsDrawnIndex] = true;\n            this.epidemicsDrawnIndex++;\n        }\n    }\n\n    public drawInfectionDeck(city: City): void {\n        this.infectionDeck.draw(city);\n    }\n\n    public removeInfectionCard(city: City): void {\n        this.infectionDeck.removeInfectionCard(city);\n    }\n\n    public intensify(): void {\n        this.infectionDeck.intensify();\n    }\n\n    public getCityGroups(): City[][] {\n        return this.infectionDeck.getCityGroups();\n    }\n\n    public getDiscards(): City[] {\n        return this.infectionDeck.getDiscards();\n    }\n\n    public getEpidemicsDrawn(): boolean[] {\n        return this.epidemicsDrawn;\n    }\n\n    public getSeason(): 0 | 1 | 2 {\n        return this.season;\n    }\n\n    public getMonth(): number {\n        return this.month;\n    }\n}\n\nexport const Assistant = new PandemicAssistant();\n","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport {\n    IonIcon,\n    IonLabel,\n    IonRouterOutlet,\n    IonTabBar,\n    IonTabButton,\n    IonTabs,\n} from '@ionic/react';\nimport { globeOutline, warningOutline } from 'ionicons/icons';\nimport EpidemicsTab from './EpidemicsTab';\nimport InfectionsTab from './InfectionsTab';\n\nimport { Storage } from '@capacitor/storage';\nimport { Controller } from '../controller/controller';\nimport { GameConfiguration } from './SeasonSetupPage';\n\n\nconst controller = new Controller();\n\nclass MainTabs extends React.Component<{}, { season: 0 | 1 }> {\n\n    constructor(props: any) {\n        super(props)\n        this.state = { season: 0 };\n        Storage.get({ key: \"setup\" }).then((setupResult) => {\n            Storage.get({ key: \"initialized\" }).then((initializedResult) => {\n                if (initializedResult.value === \"false\") {\n                    const state: GameConfiguration = JSON.parse(setupResult.value as any) as any;\n                    controller.setup(state.season,\n                        state.month,\n                        state.playerCount,\n                        state.eventCards,\n                        state.epidemicCards,\n                        state.objectiveCards,\n                        state.seasonZeroConfiguration\n                    );\n                    Storage.set({ key: \"initialized\", value: \"true\" });\n                }\n            });\n        });\n    }\n\n    public render(): JSX.Element {\n        return <IonTabs>\n            <IonRouterOutlet>\n                <Route exact path=\"/epidemics\">\n                    <EpidemicsTab controller={controller} />\n                </Route>\n                <Route exact path=\"/infections\">\n                    <InfectionsTab controller={controller} />\n                </Route>\n            </IonRouterOutlet>\n            <IonTabBar slot=\"bottom\">\n                <IonTabButton tab=\"epidemics\" href=\"/epidemics\">\n                    <IonIcon icon={warningOutline} />\n                    <IonLabel>{this.state.season === 0 ? \"Escalations\" : \"Epidemics\"}</IonLabel>\n                </IonTabButton>\n                <IonTabButton tab=\"infections\" href=\"/infections\">\n                    <IonIcon icon={globeOutline} />\n                    <IonLabel>{this.state.season === 0 ? \"Threats\" : \"Infections\"}</IonLabel>\n                </IonTabButton>\n            </IonTabBar>\n        </IonTabs>\n    }\n}\n\nexport default MainTabs;\n","import { City } from \"../service/city\";\nimport { PandemicAssistant, SeasonZeroConfiguration } from \"../service/pandemicAssistant\";\n\nexport interface ControllerProps {\n    controller: Controller;\n}\n\nexport class Controller {\n\n    private playerDeckHandlers: Function[] = [];\n\n    private infectionDeckHandlers: Function[] = [];\n\n    private assistant: PandemicAssistant;\n\n    constructor() {\n        this.assistant = new PandemicAssistant();\n    }\n\n    public attachPlayerDeckHandler(handler: Function): void {\n        this.playerDeckHandlers.push(handler);\n    }\n\n    public attachInfectionDeckHandler(handler: Function): void {\n        this.infectionDeckHandlers.push(handler);\n    }\n\n    public detachPlayerDeckHandler(handler: Function): void {\n        const idx = this.playerDeckHandlers.indexOf(handler);\n        if (idx !== -1) {\n            this.playerDeckHandlers.splice(idx, 1);\n        }\n    }\n\n    public detachInfectionDeckHandler(handler: Function): void {\n        const idx = this.infectionDeckHandlers.indexOf(handler);\n        if (idx !== -1) {\n            this.infectionDeckHandlers.splice(idx, 1);\n        }\n    }\n\n    private notifyHandlers(handlers: Function[]): void {\n        handlers.forEach(handler => {\n            handler();\n        });\n    }\n\n    private notifyPlayerDeckHandlers(): void {\n        this.notifyHandlers(this.playerDeckHandlers);\n    }\n\n    private notifyInfectionDeckHandlers(): void {\n        this.notifyHandlers(this.infectionDeckHandlers);\n    }\n\n    public setup(\n        season: 0 | 1,\n        month: number,\n        playerCount: number,\n        eventCards: number,\n        epidemicCards: number,\n        objectiveCards: number,\n        seasonZeroConfiguration: SeasonZeroConfiguration\n    ): void {\n        this.assistant.setup(season, month, playerCount, eventCards, epidemicCards, objectiveCards, seasonZeroConfiguration);\n        this.notifyPlayerDeckHandlers();\n        this.notifyInfectionDeckHandlers();\n    }\n\n    public drawPlayerDeck(epidemic: boolean): void {\n        this.assistant.drawPlayerDeck(epidemic);\n        this.notifyPlayerDeckHandlers();\n    }\n\n    public drawInfectionDeck(city: City): void {\n        this.assistant.drawInfectionDeck(city);\n    }\n\n    public removeInfectionCard(city: City): void {\n        this.assistant.removeInfectionCard(city);\n    }\n\n    public intensify(): void {\n        this.assistant.intensify();\n    }\n\n    public getRemainingPlayerCards(): number {\n        return this.assistant.getRemainingPlayerCards();\n    }\n\n    public getCityGroups(): City[][] {\n        return this.assistant.getCityGroups();\n    }\n\n    public getDiscards(): City[] {\n        return this.assistant.getDiscards();\n    }\n\n    public getEpidemicsDrawn(): boolean[] {\n        return this.assistant.getEpidemicsDrawn();\n    }\n\n    public getMinRemainder(): number {\n        return this.assistant.getMinRemainder();\n    }\n\n    public getMaxRemainder(): number {\n        return this.assistant.getMaxRemainder();\n    }\n\n    public getSeason(): 0 | 1 | 2 {\n        return this.assistant.getSeason();\n    }\n\n    public getMonth(): number {\n        return this.assistant.getMonth();\n    }\n\n}\n","import React from 'react';\nimport { useIonRouter } from \"@ionic/react\";\nimport { IonButton } from '@ionic/react';\nimport { Storage } from '@capacitor/storage';\n\nconst NextButton: React.FC<{ season: 0 | 1, playerCount: number, month: number }> = (props) => {\n    const router = useIonRouter();\n    return (\n        <IonButton expand=\"block\" onClick={async () => {\n            await Storage.set({ key: \"season\", value: String(props.season) });\n            await Storage.set({ key: \"playerCount\", value: String(props.playerCount) });\n            await Storage.set({ key: \"month\", value: String(props.month) });\n            router.push(`/setup/${props.season}`);\n        }}>\n            Next\n        </IonButton>\n    );\n}\n\nexport default NextButton;\n","import React from 'react';\nimport { IonGrid, IonCol, IonRow, IonList, IonLabel, IonItem, IonSelect, IonSelectOption, IonContent, IonHeader, IonPage, IonTitle, IonToolbar } from '@ionic/react';\nimport { RouteComponentProps } from 'react-router-dom';\nimport NextButton from '../components/NextButton';\n\nclass SetupPage extends React.Component<RouteComponentProps, { season: 0 | 1, month: number, playerCount: number }> {\n\n    constructor(props: RouteComponentProps) {\n        super(props)\n        this.state = { season: 0, month: 1, playerCount: 2 };\n    }\n\n    public render() {\n        return (\n            <IonPage>\n                <IonHeader>\n                    <IonToolbar>\n                        <IonTitle>Pandemic Assistant</IonTitle>\n                    </IonToolbar>\n                </IonHeader>\n                <IonContent fullscreen>\n                    <IonHeader collapse=\"condense\">\n                        <IonToolbar>\n                            <IonTitle size=\"large\">Pandemic Assistant</IonTitle>\n                        </IonToolbar>\n                    </IonHeader>\n                    <IonList>\n                        <IonItem>\n                            <IonLabel>Season</IonLabel>\n                            <IonSelect value={String(this.state.season)} interface=\"popover\" onIonChange={e => {\n                                this.setState({ season: Number(e.detail.value) as any });\n                            }}>\n                                <IonSelectOption value=\"0\">0</IonSelectOption>\n                                <IonSelectOption value=\"1\">1</IonSelectOption>\n                                <IonSelectOption value=\"2\">2</IonSelectOption>\n                            </IonSelect>\n                        </IonItem>\n                        <IonItem>\n                            <IonLabel>Player Count</IonLabel>\n                            <IonSelect value={String(this.state.playerCount)} interface=\"popover\" onIonChange={e => {\n                                this.setState({ playerCount: Number(e.detail.value) });\n                            }}>\n                                <IonSelectOption value=\"1\">1</IonSelectOption>\n                                <IonSelectOption value=\"2\">2</IonSelectOption>\n                                <IonSelectOption value=\"3\">3</IonSelectOption>\n                                <IonSelectOption value=\"4\">4</IonSelectOption>\n                                <IonSelectOption value=\"5\">5</IonSelectOption>\n                            </IonSelect>\n                        </IonItem>\n                        <IonItem>\n                            <IonLabel>Month</IonLabel>\n                            <IonSelect value={String(this.state.month)} interface=\"popover\" onIonChange={e => {\n                                this.setState({ month: Number(e.detail.value) });\n                            }}>\n                                <IonSelectOption value=\"0\">Prologue</IonSelectOption>\n                                <IonSelectOption value=\"1\">January</IonSelectOption>\n                                <IonSelectOption value=\"2\">February</IonSelectOption>\n                                <IonSelectOption value=\"3\">March</IonSelectOption>\n                                <IonSelectOption value=\"4\">April</IonSelectOption>\n                                <IonSelectOption value=\"5\">May</IonSelectOption>\n                                <IonSelectOption value=\"6\">June</IonSelectOption>\n                                <IonSelectOption value=\"7\">July</IonSelectOption>\n                                <IonSelectOption value=\"8\">August</IonSelectOption>\n                                <IonSelectOption value=\"9\">September</IonSelectOption>\n                                <IonSelectOption value=\"10\">October</IonSelectOption>\n                                <IonSelectOption value=\"11\">November</IonSelectOption>\n                                <IonSelectOption value=\"12\">December</IonSelectOption>\n                            </IonSelect>\n                        </IonItem>\n                        <IonGrid>\n                            <IonRow>\n                                <IonCol></IonCol>\n                                <IonCol>\n                                    <NextButton season={this.state.season} playerCount={this.state.playerCount} month={this.state.month} />\n                                </IonCol>\n                                <IonCol></IonCol>\n                            </IonRow>\n                        </IonGrid>\n                    </IonList>\n                </IonContent>\n            </IonPage>\n        );\n    }\n}\n\nexport default SetupPage;\n","import React from 'react';\nimport { useIonRouter } from \"@ionic/react\";\nimport { IonButton } from '@ionic/react';\nimport { Storage } from '@capacitor/storage';\nimport { GameConfiguration, SeasonSetupState } from '../pages/SeasonSetupPage';\n\nfunction serialize(state: SeasonSetupState): GameConfiguration {\n    const africa: string[] = [];\n    state.seasonZeroConfiguration.africaThreatCards.forEach((city) => {\n        africa.push(city.getName());\n    });\n    const southAmerica: string[] = [];\n    state.seasonZeroConfiguration.southAmericaThreatCards.forEach((city) => {\n        southAmerica.push(city.getName());\n    });\n    return {\n        season: state.season,\n        playerCount: state.playerCount,\n        month: state.month,\n        eventCards: state.eventCards,\n        epidemicCards: state.epidemicCards,\n        objectiveCards: state.objectiveCards,\n        seasonZeroConfiguration: {\n            africaThreatCards: africa,\n            southAmericaThreatCards: southAmerica\n        }\n    };\n}\n\nconst StartButton: React.FC<{ config: SeasonSetupState }> = (props) => {\n    const router = useIonRouter();\n    return (\n        <IonButton expand=\"block\" onClick={async () => {\n            await Storage.set({ key: \"initialized\", value: \"false\" });\n            await Storage.set({ key: \"setup\", value: JSON.stringify(serialize(props.config)) });\n            router.push(\"/epidemics\");\n        }}>\n            Start\n        </IonButton>\n    );\n}\n\nexport default StartButton;\n","import React from 'react';\nimport { IonGrid, IonCol, IonRow, IonList, IonLabel, IonInput, IonItem, IonSelect, IonSelectOption, IonContent, IonHeader, IonPage, IonTitle, IonToolbar, IonBackButton, IonButtons } from '@ionic/react';\nimport { ControllerProps } from \"../controller/controller\";\nimport { Storage } from '@capacitor/storage';\nimport { City, getAfricaInfections, getSouthAmericaInfections } from '../service/city';\nimport { SeasonZeroConfiguration } from '../service/pandemicAssistant';\nimport StartButton from '../components/StartButton';\n\nexport interface SeasonSetupState {\n    season: 0 | 1;\n    playerCount: number;\n    month: number;\n    eventCards: number;\n    epidemicCards: number;\n    objectiveCards: number;\n    seasonZeroConfiguration: {\n        africaThreatCards: Set<City>;\n        southAmericaThreatCards: Set<City>;\n    };\n}\n\nexport interface GameConfiguration {\n    season: 0 | 1;\n    playerCount: number;\n    month: number;\n    eventCards: number;\n    epidemicCards: number;\n    objectiveCards: number;\n    seasonZeroConfiguration: SeasonZeroConfiguration;\n}\n\nclass SeasonSetupPage extends React.Component<ControllerProps, SeasonSetupState> {\n\n    constructor(props: ControllerProps) {\n        super(props)\n        this.state = {\n            season: 0,\n            playerCount: 4,\n            month: 1,\n            eventCards: 4,\n            epidemicCards: 5,\n            objectiveCards: 0,\n            seasonZeroConfiguration: {\n                africaThreatCards: new Set(),\n                southAmericaThreatCards: new Set()\n            }\n        };\n        Storage.get({ key: \"season\" }).then((result) => {\n            const season = Number(result.value) as (0 | 1);\n            if (season === 0) {\n                this.setState({ season: season, epidemicCards: 5 });\n            } else {\n                this.setState({ season: season });\n            }\n        });\n        Storage.get({ key: \"playerCount\" }).then((result) => {\n            this.setState({ playerCount: Number(result.value) });\n        });\n        Storage.get({ key: \"month\" }).then((result) => {\n            this.setState({ month: Number(result.value) });\n        });\n\n        this.updateExtraThreatCards.bind(this);\n    }\n\n    private updateExtraThreatCards(threatCards: Set<City>, cities: string[]): void {\n        threatCards.clear();\n        for (const city of cities) {\n            threatCards.add(city as any);\n        }\n    }\n\n    private createInfectionSelection(month: number, label: string, cardsToUpdate: Set<City>, infectionCards: City[]): JSX.Element {\n        if (this.state.season === 0 && this.state.month >= month) {\n            return <IonItem>\n                <IonLabel>Infected Cities ({label})</IonLabel>\n                <IonSelect multiple interface=\"popover\" onIonChange={e => {\n                    this.updateExtraThreatCards(cardsToUpdate, e.detail.value);\n                }}>\n                    {infectionCards.map((city) => {\n                        return <IonSelectOption key={city.getName()} value={city}>{city.getName()}</IonSelectOption>\n                    })}\n                </IonSelect>\n            </IonItem>\n        }\n        return <div></div>\n    }\n\n    public render() {\n        return (\n            <IonPage>\n                <IonHeader>\n                    <IonToolbar>\n                        <IonButtons slot=\"start\">\n                            <IonBackButton defaultHref=\"/\"></IonBackButton>\n                        </IonButtons>\n                        <IonTitle>Season {this.state.season}</IonTitle>\n                    </IonToolbar>\n                </IonHeader>\n                <IonContent fullscreen>\n                    <IonList>\n                        <IonItem>\n                            <IonLabel>Event Cards</IonLabel>\n                            <IonSelect value={String(this.state.eventCards)} interface=\"popover\" onIonChange={e => {\n                                this.setState({ eventCards: Number(e.detail.value) });\n                            }}>\n                                <IonSelectOption value=\"0\">0</IonSelectOption>\n                                <IonSelectOption value=\"1\">1</IonSelectOption>\n                                <IonSelectOption value=\"2\">2</IonSelectOption>\n                                <IonSelectOption value=\"3\">3</IonSelectOption>\n                                <IonSelectOption value=\"4\">4</IonSelectOption>\n                                <IonSelectOption value=\"5\">5</IonSelectOption>\n                                <IonSelectOption value=\"6\">6</IonSelectOption>\n                                <IonSelectOption value=\"7\">7</IonSelectOption>\n                                <IonSelectOption value=\"8\">8</IonSelectOption>\n                            </IonSelect>\n                        </IonItem>\n                        {this.state.season === 0 &&\n                            <IonItem>\n                                <IonLabel>Objective Cards</IonLabel>\n                                <IonInput\n                                    type=\"number\"\n                                    value={this.state.objectiveCards}\n                                    placeholder=\"Enter Number\"\n                                    min=\"0\"\n                                    onIonChange={e => this.setState({ objectiveCards: Number(e.detail.value) })}>\n                                </IonInput>\n                            </IonItem>\n                        }\n                        {this.state.season !== 0 &&\n                            // there are only ever 5 cards in Season 0\n                            <IonItem>\n                                <IonLabel>Epidemics</IonLabel>\n                                <IonSelect value={String(this.state.epidemicCards)} interface=\"popover\" onIonChange={e => {\n                                    this.setState({ epidemicCards: Number(e.detail.value) });\n                                }}>\n                                    <IonSelectOption value=\"4\">4</IonSelectOption>\n                                    <IonSelectOption value=\"5\">5</IonSelectOption>\n                                    <IonSelectOption value=\"6\">6</IonSelectOption>\n                                    <IonSelectOption value=\"7\">7</IonSelectOption>\n                                </IonSelect>\n                            </IonItem>\n                        }\n                        {this.createInfectionSelection(\n                            3, \"Africa\",\n                            this.state.seasonZeroConfiguration.africaThreatCards,\n                            getAfricaInfections()\n                        )}\n                        {this.createInfectionSelection(\n                            5, \"South America\",\n                            this.state.seasonZeroConfiguration.southAmericaThreatCards,\n                            getSouthAmericaInfections()\n                        )}\n                        <IonGrid>\n                            <IonRow>\n                                <IonCol></IonCol>\n                                <IonCol>\n                                    <StartButton config={ this.state }></StartButton>\n                                </IonCol>\n                                <IonCol></IonCol>\n                            </IonRow>\n                        </IonGrid>\n                    </IonList>\n                </IonContent>\n            </IonPage>\n        );\n    }\n}\n\nexport default SeasonSetupPage;\n","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport { IonApp } from '@ionic/react';\nimport { IonReactHashRouter } from '@ionic/react-router';\nimport MainTabs from './pages/MainTabs';\nimport SetupPage from './pages/SetupPage';\n\n/* Core CSS required for Ionic components to work properly */\nimport '@ionic/react/css/core.css';\n\n/* Basic CSS for apps built with Ionic */\nimport '@ionic/react/css/normalize.css';\nimport '@ionic/react/css/structure.css';\nimport '@ionic/react/css/typography.css';\n\n/* Optional CSS utils that can be commented out */\nimport '@ionic/react/css/padding.css';\nimport '@ionic/react/css/float-elements.css';\nimport '@ionic/react/css/text-alignment.css';\nimport '@ionic/react/css/text-transformation.css';\nimport '@ionic/react/css/flex-utils.css';\nimport '@ionic/react/css/display.css';\n\n/* Theme variables */\nimport './theme/variables.css';\nimport SeasonSetupPage from './pages/SeasonSetupPage';\n\nclass App extends React.Component {\n\n    public render(): JSX.Element {\n        return <IonApp>\n            <IonReactHashRouter>\n                <Route path=\"/\" component={SetupPage} exact />\n                <Route path=\"/setup/:id\" component={SeasonSetupPage} exact />\n                <Route path=\"/epidemics\" component={MainTabs} exact />\n                <Route path=\"/infections\" component={MainTabs} exact />\n            </IonReactHashRouter>\n        </IonApp>\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}